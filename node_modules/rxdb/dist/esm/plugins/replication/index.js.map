{"version":3,"file":"index.js","names":["BehaviorSubject","combineLatest","filter","mergeMap","Subject","RxDBLeaderElectionPlugin","arrayFilterNotEmpty","ensureNotFalsy","errorToPlainJson","flatClone","getFromMapOrCreate","PROMISE_RESOLVE_FALSE","PROMISE_RESOLVE_TRUE","toArray","toPromise","awaitRxStorageReplicationFirstInSync","awaitRxStorageReplicationInSync","cancelRxStorageReplication","getRxReplicationMetaInstanceSchema","replicateRxStorageInstance","newRxError","awaitRetry","DEFAULT_MODIFIER","swapDefaultDeletedTodeletedField","handlePulledDocuments","preventHibernateBrowserTab","addConnectedStorageToCollection","removeConnectedStorageFromCollection","addRxPlugin","hasEncryption","overwritable","runAsyncPluginHooks","REPLICATION_STATE_BY_COLLECTION","WeakMap","RxReplicationState","replicationIdentifier","collection","deletedField","pull","push","live","retryTime","autoStart","toggleOnDocumentVisible","subs","subjects","received","sent","error","canceled","active","received$","asObservable","sent$","error$","canceled$","active$","wasStarted","onCancel","callOnStart","undefined","remoteEvents$","metaInfoPromise","metaInstanceCollectionName","database","hashFunction","name","join","metaInstanceSchema","schema","jsonSchema","collectionName","replicationStates","onClose","cancel","Object","keys","forEach","key","defineProperty","get","startPromise","Promise","res","_proto","prototype","start","isStopped","internalReplicationState","events","paused","next","reSync","pullModifier","modifier","pushModifier","metaInfo","metaInstance","all","storage","createStorageInstance","databaseName","databaseInstanceToken","token","multiInstance","options","password","devMode","isDevMode","pushBatchSize","batchSize","pullBatchSize","initialCheckpoint","upstream","downstream","forkInstance","storageInstance","identifier","conflictHandler","replicationHandler","masterChangeStream$","pipe","_v","ev","useEv","documents","map","d","masterChangesSince","checkpoint","done","result","isStoppedOrPaused","handler","err","emitError","errors","er","direction","useResult","masterWrite","rows","useRowsOrNull","row","newDocumentState","assumedMasterState","useRows","length","Array","isArray","pushRows","args","rxdb","conflicts","subscribe","processed","down","document","up","writeToMasterRow","isActive","stream$","pause","isPaused","getValue","awaitInitialReplication","awaitInSync","t","requestIdlePromise","emitEvent","promises","fn","checkpointQueue","then","close","sub","unsubscribe","complete","remove","replicateRxCollection","waitForLeadership","replicationState","addEventListener","visibilityState","isVisible","isLeader","removeEventListener","startReplicationOnLeaderShip","mustWaitForLeadership","waitTillRun"],"sources":["../../../../src/plugins/replication/index.ts"],"sourcesContent":["/**\n * This plugin contains the primitives to create\n * a RxDB client-server replication.\n * It is used in the other replication plugins\n * but also can be used as standalone with a custom replication handler.\n */\n\nimport {\n    BehaviorSubject,\n    combineLatest,\n    filter,\n    mergeMap,\n    Observable,\n    Subject,\n    Subscription\n} from 'rxjs';\nimport type {\n    ReplicationOptions,\n    ReplicationPullHandlerResult,\n    ReplicationPullOptions,\n    ReplicationPushOptions,\n    RxCollection,\n    RxDocumentData,\n    RxError,\n    RxJsonSchema,\n    RxReplicationPullStreamItem,\n    RxReplicationWriteToMasterRow,\n    RxStorageInstance,\n    RxStorageInstanceReplicationState,\n    RxStorageReplicationMeta,\n    RxTypeError,\n    WithDeleted\n} from '../../types/index.d.ts';\nimport { RxDBLeaderElectionPlugin } from '../leader-election/index.ts';\nimport {\n    arrayFilterNotEmpty,\n    ensureNotFalsy,\n    errorToPlainJson,\n    flatClone,\n    getFromMapOrCreate,\n    PROMISE_RESOLVE_FALSE,\n    PROMISE_RESOLVE_TRUE,\n    toArray,\n    toPromise\n} from '../../plugins/utils/index.ts';\nimport {\n    awaitRxStorageReplicationFirstInSync,\n    awaitRxStorageReplicationInSync,\n    cancelRxStorageReplication,\n    getRxReplicationMetaInstanceSchema,\n    replicateRxStorageInstance\n} from '../../replication-protocol/index.ts';\nimport { newRxError } from '../../rx-error.ts';\nimport {\n    awaitRetry,\n    DEFAULT_MODIFIER,\n    swapDefaultDeletedTodeletedField,\n    handlePulledDocuments,\n    preventHibernateBrowserTab\n} from './replication-helper.ts';\nimport {\n    addConnectedStorageToCollection,\n    removeConnectedStorageFromCollection\n} from '../../rx-database-internal-store.ts';\nimport { addRxPlugin } from '../../plugin.ts';\nimport { hasEncryption } from '../../rx-storage-helper.ts';\nimport { overwritable } from '../../overwritable.ts';\nimport {\n    runAsyncPluginHooks\n} from '../../hooks.ts';\n\n\nexport const REPLICATION_STATE_BY_COLLECTION: WeakMap<RxCollection, RxReplicationState<any, any>[]> = new WeakMap();\n\nexport class RxReplicationState<RxDocType, CheckpointType> {\n    public readonly subs: Subscription[] = [];\n    public readonly subjects = {\n        received: new Subject<RxDocumentData<RxDocType>>(), // all documents that are received from the endpoint\n        sent: new Subject<WithDeleted<RxDocType>>(), // all documents that are send to the endpoint\n        error: new Subject<RxError | RxTypeError>(), // all errors that are received from the endpoint, emits new Error() objects\n        canceled: new BehaviorSubject<boolean>(false), // true when the replication was canceled\n        active: new BehaviorSubject<boolean>(false) // true when something is running, false when not\n    };\n\n    readonly received$: Observable<RxDocumentData<RxDocType>> = this.subjects.received.asObservable();\n    readonly sent$: Observable<WithDeleted<RxDocType>> = this.subjects.sent.asObservable();\n    readonly error$: Observable<RxError | RxTypeError> = this.subjects.error.asObservable();\n    readonly canceled$: Observable<any> = this.subjects.canceled.asObservable();\n    readonly active$: Observable<boolean> = this.subjects.active.asObservable();\n\n    wasStarted: boolean = false;\n\n    readonly metaInfoPromise: Promise<{ collectionName: string, schema: RxJsonSchema<RxDocumentData<RxStorageReplicationMeta<RxDocType, any>>> }>;\n\n    public startPromise: Promise<void>;\n\n    public onCancel: (() => void)[] = [];\n\n    constructor(\n        /**\n         * The identifier, used to flag revisions\n         * and to identify which documents state came from the remote.\n         */\n        public readonly replicationIdentifier: string,\n        public readonly collection: RxCollection<RxDocType>,\n        public readonly deletedField: string,\n        public readonly pull?: ReplicationPullOptions<RxDocType, CheckpointType>,\n        public readonly push?: ReplicationPushOptions<RxDocType>,\n        public readonly live?: boolean,\n        public retryTime?: number,\n        public autoStart?: boolean,\n        public toggleOnDocumentVisible?: boolean\n    ) {\n        this.metaInfoPromise = (async () => {\n            const metaInstanceCollectionName = 'rx-replication-meta-' + await collection.database.hashFunction([\n                this.collection.name,\n                this.replicationIdentifier\n            ].join('-'));\n            const metaInstanceSchema = getRxReplicationMetaInstanceSchema(\n                this.collection.schema.jsonSchema,\n                hasEncryption(this.collection.schema.jsonSchema)\n            );\n            return {\n                collectionName: metaInstanceCollectionName,\n                schema: metaInstanceSchema\n            };\n        })();\n        const replicationStates = getFromMapOrCreate(\n            REPLICATION_STATE_BY_COLLECTION,\n            collection,\n            () => []\n        );\n        replicationStates.push(this);\n\n        // stop the replication when the collection gets closed\n        this.collection.onClose.push(() => this.cancel());\n\n        // create getters for the observables\n        Object.keys(this.subjects).forEach(key => {\n            Object.defineProperty(this, key + '$', {\n                get: function () {\n                    return this.subjects[key].asObservable();\n                }\n            });\n        });\n        const startPromise = new Promise<void>(res => {\n            this.callOnStart = res;\n        });\n        this.startPromise = startPromise;\n    }\n\n    private callOnStart: () => void = undefined as any;\n\n    public internalReplicationState?: RxStorageInstanceReplicationState<RxDocType>;\n    public metaInstance?: RxStorageInstance<RxStorageReplicationMeta<RxDocType, CheckpointType>, any, {}, any>;\n    public remoteEvents$: Subject<RxReplicationPullStreamItem<RxDocType, CheckpointType>> = new Subject();\n\n    public async start(): Promise<void> {\n        if (this.isStopped()) {\n            return;\n        }\n\n        if (this.internalReplicationState) {\n            this.internalReplicationState.events.paused.next(false);\n        }\n\n        /**\n         * If started after a pause,\n         * just re-sync once and continue.\n         */\n        if (this.wasStarted) {\n            this.reSync();\n            return;\n        }\n        this.wasStarted = true;\n\n\n        if (!this.toggleOnDocumentVisible) {\n            preventHibernateBrowserTab(this);\n        }\n\n        // fill in defaults for pull & push\n        const pullModifier = this.pull && this.pull.modifier ? this.pull.modifier : DEFAULT_MODIFIER;\n        const pushModifier = this.push && this.push.modifier ? this.push.modifier : DEFAULT_MODIFIER;\n\n        const database = this.collection.database;\n        const metaInfo = await this.metaInfoPromise;\n\n        const [metaInstance] = await Promise.all([\n            this.collection.database.storage.createStorageInstance<RxStorageReplicationMeta<RxDocType, CheckpointType>>({\n                databaseName: database.name,\n                collectionName: metaInfo.collectionName,\n                databaseInstanceToken: database.token,\n                multiInstance: database.multiInstance,\n                options: {},\n                schema: metaInfo.schema,\n                password: database.password,\n                devMode: overwritable.isDevMode()\n            }),\n            addConnectedStorageToCollection(\n                this.collection,\n                metaInfo.collectionName,\n                metaInfo.schema\n            )\n        ]);\n        this.metaInstance = metaInstance;\n\n\n        this.internalReplicationState = replicateRxStorageInstance({\n            pushBatchSize: this.push && this.push.batchSize ? this.push.batchSize : 100,\n            pullBatchSize: this.pull && this.pull.batchSize ? this.pull.batchSize : 100,\n            initialCheckpoint: {\n                upstream: this.push ? this.push.initialCheckpoint : undefined,\n                downstream: this.pull ? this.pull.initialCheckpoint : undefined\n            },\n            forkInstance: this.collection.storageInstance,\n            metaInstance: this.metaInstance,\n            hashFunction: database.hashFunction,\n            identifier: 'rxdbreplication' + this.replicationIdentifier,\n            conflictHandler: this.collection.conflictHandler,\n            replicationHandler: {\n                masterChangeStream$: this.remoteEvents$.asObservable().pipe(\n                    filter(_v => !!this.pull),\n                    mergeMap(async (ev) => {\n                        if (ev === 'RESYNC') {\n                            return ev;\n                        }\n                        const useEv = flatClone(ev);\n                        useEv.documents = handlePulledDocuments(this.collection, this.deletedField, useEv.documents);\n                        useEv.documents = await Promise.all(\n                            useEv.documents.map(d => pullModifier(d))\n                        );\n                        return useEv;\n                    })\n                ),\n                masterChangesSince: async (\n                    checkpoint: CheckpointType | undefined,\n                    batchSize: number\n                ) => {\n                    if (!this.pull) {\n                        return {\n                            checkpoint: null,\n                            documents: []\n                        };\n                    }\n                    /**\n                     * Retries must be done here in the replication primitives plugin,\n                     * because the replication protocol itself has no\n                     * error handling.\n                     */\n                    let done = false;\n                    let result: ReplicationPullHandlerResult<RxDocType, CheckpointType> = {} as any;\n                    while (!done && !this.isStoppedOrPaused()) {\n                        try {\n                            result = await this.pull.handler(\n                                checkpoint,\n                                batchSize\n                            );\n                            done = true;\n                        } catch (err: any | Error | Error[]) {\n                            const emitError = newRxError('RC_PULL', {\n                                checkpoint,\n                                errors: toArray(err).map(er => errorToPlainJson(er)),\n                                direction: 'pull'\n                            });\n                            this.subjects.error.next(emitError);\n                            await awaitRetry(this.collection, ensureNotFalsy(this.retryTime));\n                        }\n                    }\n\n                    if (this.isStoppedOrPaused()) {\n                        return {\n                            checkpoint: null,\n                            documents: []\n                        };\n                    }\n\n                    const useResult = flatClone(result);\n                    useResult.documents = handlePulledDocuments(this.collection, this.deletedField, useResult.documents);\n                    useResult.documents = await Promise.all(\n                        useResult.documents.map(d => pullModifier(d))\n                    );\n                    return useResult;\n                },\n                masterWrite: async (\n                    rows: RxReplicationWriteToMasterRow<RxDocType>[]\n                ) => {\n                    if (!this.push) {\n                        return [];\n                    }\n                    let done = false;\n\n                    await runAsyncPluginHooks('preReplicationMasterWrite', {\n                        rows,\n                        collection: this.collection\n                    });\n\n                    const useRowsOrNull = await Promise.all(\n                        rows.map(async (row) => {\n                            row.newDocumentState = await pushModifier(row.newDocumentState);\n                            if (row.newDocumentState === null) {\n                                return null;\n                            }\n                            if (row.assumedMasterState) {\n                                row.assumedMasterState = await pushModifier(row.assumedMasterState);\n                            }\n                            if (this.deletedField !== '_deleted') {\n                                row.newDocumentState = swapDefaultDeletedTodeletedField(this.deletedField, row.newDocumentState) as any;\n                                if (row.assumedMasterState) {\n                                    row.assumedMasterState = swapDefaultDeletedTodeletedField(this.deletedField, row.assumedMasterState) as any;\n                                }\n                            }\n                            return row;\n                        })\n                    );\n                    const useRows: RxReplicationWriteToMasterRow<RxDocType>[] = useRowsOrNull.filter(arrayFilterNotEmpty);\n\n                    let result: WithDeleted<RxDocType>[] = null as any;\n\n                    // In case all the rows have been filtered and nothing has to be sent\n                    if (useRows.length === 0) {\n                        done = true;\n                        result = [];\n                    }\n\n                    while (!done && !this.isStoppedOrPaused()) {\n                        try {\n                            result = await this.push.handler(useRows);\n                            /**\n                             * It is a common problem that people have wrongly behaving backend\n                             * that do not return an array with the conflicts on push requests.\n                             * So we run this check here to make it easier to debug.\n                             * @link https://github.com/pubkey/rxdb/issues/4103\n                             */\n                            if (!Array.isArray(result)) {\n                                throw newRxError(\n                                    'RC_PUSH_NO_AR',\n                                    {\n                                        pushRows: rows,\n                                        direction: 'push',\n                                        args: { result }\n                                    }\n                                );\n                            }\n                            done = true;\n                        } catch (err: any | Error | Error[] | RxError) {\n                            const emitError = (err as RxError).rxdb ? err : newRxError('RC_PUSH', {\n                                pushRows: rows,\n                                errors: toArray(err).map(er => errorToPlainJson(er)),\n                                direction: 'push'\n                            });\n                            this.subjects.error.next(emitError);\n                            await awaitRetry(this.collection, ensureNotFalsy(this.retryTime));\n                        }\n                    }\n                    if (this.isStoppedOrPaused()) {\n                        return [];\n                    }\n\n                    await runAsyncPluginHooks('preReplicationMasterWriteDocumentsHandle', {\n                        result,\n                        collection: this.collection\n                    });\n\n                    const conflicts = handlePulledDocuments(this.collection, this.deletedField, ensureNotFalsy(result));\n                    return conflicts;\n                }\n            }\n        });\n        this.subs.push(\n            this.internalReplicationState.events.error.subscribe(err => {\n                this.subjects.error.next(err);\n            }),\n            this.internalReplicationState.events.processed.down\n                .subscribe(row => this.subjects.received.next(row.document as any)),\n            this.internalReplicationState.events.processed.up\n                .subscribe(writeToMasterRow => {\n                    this.subjects.sent.next(writeToMasterRow.newDocumentState);\n                }),\n            combineLatest([\n                this.internalReplicationState.events.active.down,\n                this.internalReplicationState.events.active.up\n            ]).subscribe(([down, up]) => {\n                const isActive = down || up;\n                this.subjects.active.next(isActive);\n            })\n        );\n\n        if (\n            this.pull &&\n            this.pull.stream$ &&\n            this.live\n        ) {\n            this.subs.push(\n                this.pull.stream$.subscribe({\n                    next: ev => {\n                        if (!this.isStoppedOrPaused()) {\n                            this.remoteEvents$.next(ev);\n                        }\n                    },\n                    error: err => {\n                        this.subjects.error.next(err);\n                    }\n                })\n            );\n        }\n\n        /**\n         * Non-live replications run once\n         * and then automatically get canceled.\n         */\n        if (!this.live) {\n            await awaitRxStorageReplicationFirstInSync(this.internalReplicationState);\n            await awaitRxStorageReplicationInSync(this.internalReplicationState);\n            await this.cancel();\n        }\n        this.callOnStart();\n    }\n\n    pause() {\n        ensureNotFalsy(this.internalReplicationState).events.paused.next(true);\n    }\n\n    isPaused(): boolean {\n        return this.internalReplicationState ? this.internalReplicationState.events.paused.getValue() : false;\n    }\n\n    isStopped(): boolean {\n        if (this.subjects.canceled.getValue()) {\n            return true;\n        }\n        return false;\n    }\n\n    isStoppedOrPaused() {\n        return this.isPaused() || this.isStopped();\n    }\n\n    async awaitInitialReplication(): Promise<void> {\n        await this.startPromise;\n        return awaitRxStorageReplicationFirstInSync(\n            ensureNotFalsy(this.internalReplicationState)\n        );\n    }\n\n    /**\n     * Returns a promise that resolves when:\n     * - All local data is replicated with the remote\n     * - No replication cycle is running or in retry-state\n     *\n     * WARNING: USing this function directly in a multi-tab browser application\n     * is dangerous because only the leading instance will ever be replicated,\n     * so this promise will not resolve in the other tabs.\n     * For multi-tab support you should set and observe a flag in a local document.\n     */\n    async awaitInSync(): Promise<true> {\n        await this.startPromise;\n        await awaitRxStorageReplicationFirstInSync(ensureNotFalsy(this.internalReplicationState));\n\n        /**\n         * To reduce the amount of re-renders and make testing\n         * and to make the whole behavior more predictable,\n         * we await these things multiple times.\n         * For example the state might be in sync already and at the\n         * exact same time a pull.stream$ event comes in and we want to catch\n         * that in the same call to awaitInSync() instead of resolving\n         * while actually the state is not in sync.\n         */\n        let t = 2;\n        while (t > 0) {\n            t--;\n\n            /**\n             * Often awaitInSync() is called directly after a document write,\n             * like in the unit tests.\n             * So we first have to await the idleness to ensure that all RxChangeEvents\n             * are processed already.\n             */\n            await this.collection.database.requestIdlePromise();\n            await awaitRxStorageReplicationInSync(ensureNotFalsy(this.internalReplicationState));\n        }\n\n        return true;\n    }\n\n    reSync() {\n        this.remoteEvents$.next('RESYNC');\n    }\n    emitEvent(ev: RxReplicationPullStreamItem<RxDocType, CheckpointType>) {\n        this.remoteEvents$.next(ev);\n    }\n\n    async cancel(): Promise<any> {\n        if (this.isStopped()) {\n            return PROMISE_RESOLVE_FALSE;\n        }\n\n        const promises: Promise<any>[] = this.onCancel.map(fn => toPromise(fn()));\n\n        if (this.internalReplicationState) {\n            await cancelRxStorageReplication(this.internalReplicationState);\n        }\n        if (this.metaInstance) {\n            promises.push(\n                ensureNotFalsy(this.internalReplicationState).checkpointQueue\n                    .then(() => ensureNotFalsy(this.metaInstance).close())\n            );\n        }\n\n        this.subs.forEach(sub => sub.unsubscribe());\n        this.subjects.canceled.next(true);\n\n        this.subjects.active.complete();\n        this.subjects.canceled.complete();\n        this.subjects.error.complete();\n        this.subjects.received.complete();\n        this.subjects.sent.complete();\n\n        return Promise.all(promises);\n    }\n\n    async remove() {\n        await ensureNotFalsy(this.metaInstance).remove();\n        const metaInfo = await this.metaInfoPromise;\n        await this.cancel();\n        await removeConnectedStorageFromCollection(\n            this.collection,\n            metaInfo.collectionName,\n            metaInfo.schema\n        );\n    }\n}\n\n\nexport function replicateRxCollection<RxDocType, CheckpointType>(\n    {\n        replicationIdentifier,\n        collection,\n        deletedField = '_deleted',\n        pull,\n        push,\n        live = true,\n        retryTime = 1000 * 5,\n        waitForLeadership = true,\n        autoStart = true,\n        toggleOnDocumentVisible = false\n    }: ReplicationOptions<RxDocType, CheckpointType>\n): RxReplicationState<RxDocType, CheckpointType> {\n    addRxPlugin(RxDBLeaderElectionPlugin);\n\n    /**\n     * It is a common error to forget to add these config\n     * objects. So we check here because it makes no sense\n     * to start a replication with neither push nor pull.\n     */\n    if (!pull && !push) {\n        throw newRxError('UT3', {\n            collection: collection.name,\n            args: {\n                replicationIdentifier\n            }\n        });\n    }\n\n    const replicationState = new RxReplicationState<RxDocType, CheckpointType>(\n        replicationIdentifier,\n        collection,\n        deletedField,\n        pull,\n        push,\n        live,\n        retryTime,\n        autoStart,\n        toggleOnDocumentVisible\n    );\n\n\n    if (\n        toggleOnDocumentVisible &&\n        typeof document !== 'undefined' &&\n        typeof document.addEventListener === 'function' &&\n        typeof document.visibilityState === 'string'\n    ) {\n        const handler = () => {\n            if (replicationState.isStopped()) {\n                return;\n            }\n            const isVisible = document.visibilityState;\n            if (isVisible) {\n                replicationState.start();\n            } else {\n                /**\n                 * Only pause if not the current leader.\n                 * If no tab is visible, the elected leader should still continue\n                 * the replication.\n                 */\n                if (!collection.database.isLeader()) {\n                    replicationState.pause();\n                }\n            }\n        }\n        document.addEventListener('visibilitychange', handler);\n        replicationState.onCancel.push(\n            () => document.removeEventListener('visibilitychange', handler)\n        );\n    }\n\n\n    startReplicationOnLeaderShip(waitForLeadership, replicationState);\n    return replicationState as any;\n}\n\n\nexport function startReplicationOnLeaderShip(\n    waitForLeadership: boolean,\n    replicationState: RxReplicationState<any, any>\n) {\n    /**\n     * Always await this Promise to ensure that the current instance\n     * is leader when waitForLeadership=true\n     */\n    const mustWaitForLeadership = waitForLeadership && replicationState.collection.database.multiInstance;\n    const waitTillRun: Promise<any> = mustWaitForLeadership ? replicationState.collection.database.waitForLeadership() : PROMISE_RESOLVE_TRUE;\n    return waitTillRun.then(() => {\n        if (replicationState.isStopped()) {\n            return;\n        }\n        if (replicationState.autoStart) {\n            replicationState.start();\n        }\n    });\n}\n"],"mappings":"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","ignoreList":[]}